---
icon: fas fa-info-circle
order: 4
categories: Vulnhub
tags: 
image: https://img.goodfon.com/wallpaper/big/6/be/mr-robot-series-logo-robot.webp
---

# üß† Introduction

Hello, I‚Äôm Dr4xven, and welcome back to another deep dive into a vulnerable machine ‚Äî this time from VulnHub. In this walkthrough, we‚Äôll be tackling a box hosted at 192.168.56.101, designed to simulate real-world misconfigurations and weak security practices.

This machine offers a great hands-on opportunity to sharpen your skills in:

    Enumeration and directory fuzzing

    WordPress exploitation

    Brute-forcing credentials with Hydra

    Privilege escalation via vulnerable SUID binaries

Whether you're a beginner or brushing up your skills, this write-up will walk you through every step ‚Äî from reconnaissance to rooting the machine and collecting all 3 keys hidden inside.

So, grab your terminal, and let‚Äôs get started!


Platform : Vulnhub

Target : 192.168.56.101

## üîç Enumeration

After identifying the target machine at 192.168.56.101, our first step is to perform an Nmap scan to discover open ports, running services, and any initial attack surfaces.
üîé Nmap Scan

We used the following Nmap command to perform a comprehensive scan:

nmap -sC -sV -sS 192.168.56.101 -oN scans

    -sC: Runs default scripts

    -sV: Attempts service/version detection

    -sS: Performs a stealth SYN scan

    -oN: Saves output in normal format to a file called scans

üßæ Results:

PORT    STATE  SERVICE  VERSION
22/tcp  closed ssh
80/tcp  open   http     Apache httpd
443/tcp open   ssl/http Apache httpd

We observe that:

    Port 22 (SSH) is closed

    Port 80 is running an Apache web server (HTTP)

    Port 443 is also Apache, but over HTTPS, with a certificate for www.example.com

    
üåê Web Enumeration

Navigating to http://192.168.56.101 in the browser, we see a basic web page with no title. This is our initial entry point.

![screenshot](assets/screenshots/mrrobot/2.png)

üìÇ Directory Fuzzing

To discover hidden directories and files on the web server, I performed a content discovery scan using a wordlist. This process helps identify endpoints that are not directly linked on the main web pages but may be accessible and exploitable.

Using a tool like ffuf or dirb, the scan revealed several interesting directories and files:

    /admin/                     [200 OK]
    /admin/index.html          [200 OK]
    /claroline/phpMyAdmin/     [301 Moved Permanently]
    /dashboard/                [302 Found ‚Üí /wp-admin/]
    /db/index.php              [301 Moved Permanently]
    /readme.html               [200 OK]
    /robots.txt                [200 OK]
    /roundcube/index.php       [301 Moved Permanently]
    /sitemap.xml               [200 OK]
    /wp-content/               [Accessible]
    /wp-login.php              [200 OK ‚Äì WordPress login page]
    /wp-config.php             [200 OK ‚Äì likely a honeypot or misconfigured]

Most notably:

    The /admin/ and /wp-login.php directories indicated the presence of administrative interfaces.

    The /robots.txt file led to the discovery of key-1-of-3.txt.

    The /fsocity.dic file was accessible and appeared to be a wordlist ‚Äì a strong indicator that brute-force protection may not be enabled.

This initial fuzzing phase significantly expanded the potential attack surface and directly led to the next steps in credential discovery and exploitation.

### üìÑ Inspecting robots.txt ‚Äì First Flag & Dictionary Discovery

While reviewing the `/robots.txt` file, I discovered two interesting entries:

![screenshot](assets/screenshots/mrrobot/3.png)



    key-1-of-3.txt

    fsocity.dic

Accessing the first entry at:

```php
http://mrrobot.vln/key-1-of-3.txt
```
![screenshot](assets/screenshots/mrrobot/4.png)
‚Ä¶revealed the first key:

```php
073403c8a58a1f80d943455fb30724b9
```

This confirmed that the machine likely contains multiple flags to capture

The second file, fsocity.dic, appeared to be a wordlist, likely left behind by the developers‚Äîor purposely planted as part of the challenge.

![screenshot](assets/screenshots/mrrobot/5.png)

I downloaded it to my attacking machine using:
```php
wget http://mrrobort.vln/fsocity.dic
```
The file seemed ideal for brute-forcing login credentials during the next phase of enumeration, particularly against the WordPress login portal discovered earlier.

#### üîê WordPress Login Page & Initial Enumeration

Navigating to the /wp-admin/ directory resulted in a redirection to the WordPress login interface at:

```php
http://192.168.56.101/wp-login.php?redirect_to=http%3A%2F%2F192.168.56.101%2Fwp-admin%2F&reauth=1
```

Since no credentials were available at this point, I initiated a scan against the WordPress installation using wpscan to enumerate users and identify potential vulnerabilities.

```php
wpscan --url http://192.168.56.101/ -e u
```

Unfortunately, the scan didn‚Äôt return any valid usernames:
```php
[i] No Users Found.
```

Given the lack of results from wpscan, I turned to Hydra for brute-forcing the login page. Before launching the attack, I analyzed the HTTP response to capture the exact error message presented on failed login attempts. This information is essential for accurately crafting the Hydra command and ensuring it detects incorrect credentials based on the known failure response.

!! To be continued